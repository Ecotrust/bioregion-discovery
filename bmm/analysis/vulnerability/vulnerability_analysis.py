#from django.http import HttpResponse
from django.shortcuts import render_to_response#, get_object_or_404
from django.template import RequestContext
from lingcod.raster_stats.models import RasterDataset, zonal_stats
#from analysis.models import *
#from settings import *

default_value = '---'
uw5_total = 158342000.
u5_total = 642000000.
worlds_population = 7000000000.

'''
Runs analysis for Vulnerability report
Called by analysis.views.vulnerability_analysis
'''
def display_vulnerability_analysis(request, bioregion, template='vulnerability_report.html'):
    context = run_vulnerability_analysis(bioregion)
    return render_to_response(template, RequestContext(request, context)) 
     
'''
Run the analysis, create the cache, and return the results as a context dictionary so they may be rendered with template
'''    
def run_vulnerability_analysis(bioregion):
    #still need climate change data
    climate_impact = get_climate_change_vulnerability(bioregion)
    #get human consumption (HANPP - Human Appropriation of Net Primary Productivity)
    #represents regions in which human consumption is greatly in excess of local ecosystems
    human_consumption = get_human_consumption(bioregion)
    #get human presence (built up land - light signatures and landuse) (0-100, low to high)
    human_presence = get_human_presence(bioregion)
    #get human footprint 
    #(1 represents the 1% least influenced area in its biome, values could differ in representation for different areas/biomes)
    human_footprint = get_human_footprint(bioregion)
    #get human influence index (HII)  (0-64, low to high)
    human_influence = get_human_influence(bioregion)
    #get water stress (ration of human water use to renewable water resources)
    water_stress = get_water_stress(bioregion)
    #get infant deaths
    infant_deaths = get_infant_deaths(bioregion)
    #get underweight children (number of underweight children under the age of 5)
    underweight_children = get_underweight_children(bioregion)
    perc_underweight_children = underweight_children / uw5_total #this value is the sum total of all underweight children 
    perc_impovershed = uw5_total / u5_total #(total uw5 / total <5)
    total_population = worlds_population
    estimated_impovershed = perc_underweight_children * perc_impovershed * total_population
    #percentage of population    
    population = get_population(bioregion)
    perc_population = population / worlds_population
    #compile context
    context = {'bioregion': bioregion, 'default_value': default_value, 'climate_impact': climate_impact, 'human_consumption': human_consumption, 'human_presence': human_presence, 'human_footprint': human_footprint, 'human_influence': human_influence, 'water_stress': water_stress, 'infant_deaths': infant_deaths, 'underweight_children': underweight_children, 'perc_underweight_children': perc_underweight_children, 'estimated_impovershed': estimated_impovershed, 'perc_population': perc_population}
    return context

def get_climate_change_vulnerability(bioregion):
    cc_geom = RasterDataset.objects.get(name='climate_impact')
    cc_stats = zonal_stats(bioregion.output_geom, cc_geom)
    if cc_stats.avg < -12: return 'Low'
    if cc_stats.avg < -4: return 'Moderately Low'
    if cc_stats.avg < 4: return 'Moderate'
    if cc_stats.avg < 12: return 'Moderately High'
    else: return 'High'
    
def get_human_consumption(bioregion):
    hc_geom = RasterDataset.objects.get(name='human_consumption')
    hc_stats = zonal_stats(bioregion.output_geom, hc_geom)
    return int(hc_stats.avg)
   
def get_human_presence(bioregion):
    hp_geom = RasterDataset.objects.get(name='human_presence')
    hp_stats = zonal_stats(bioregion.output_geom, hp_geom)
    return int(hp_stats.avg)
   
def get_human_footprint(bioregion):
    hf_geom = RasterDataset.objects.get(name='human_footprint')
    hf_stats = zonal_stats(bioregion.output_geom, hf_geom)
    return int(hf_stats.avg)
   
def get_human_influence(bioregion):
    hii_geom = RasterDataset.objects.get(name='human_influence_index')
    hii_stats = zonal_stats(bioregion.output_geom, hii_geom)
    return hii_stats.avg / 64
   
def get_water_stress(bioregion):
    ws_geom = RasterDataset.objects.get(name='water_stress')
    ws_stats = zonal_stats(bioregion.output_geom, ws_geom)
    return ws_stats.avg
   
def get_infant_deaths(bioregion):
    id_geom = RasterDataset.objects.get(name='infant_deaths')
    id_stats = zonal_stats(bioregion.output_geom, id_geom)
    return int(id_stats.sum)
   
def get_underweight_children(bioregion):
    uwc_geom = RasterDataset.objects.get(name='underweight_children')
    uwc_stats = zonal_stats(bioregion.output_geom, uwc_geom)
    return int(uwc_stats.sum)

def get_population(bioregion):
    pop_geom = RasterDataset.objects.get(name='population')
    pop_stats = zonal_stats(bioregion.output_geom, pop_geom)
    return int(pop_stats.sum)
   