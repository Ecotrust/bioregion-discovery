#from django.http import HttpResponse
from django.shortcuts import render_to_response#, get_object_or_404
from django.template import RequestContext
from lingcod.raster_stats.models import RasterDataset, zonal_stats
#from analysis.models import *
#from settings import *

default_value = '---'

'''
Runs analysis for Vulnerability report
Called by analysis.views.vulnerability_analysis
'''
def display_vulnerability_analysis(request, bioregion, template='vulnerability_report.html'):
    context = run_vulnerability_analysis(bioregion)
    return render_to_response(template, RequestContext(request, context)) 
     
'''
Run the analysis, create the cache, and return the results as a context dictionary so they may be rendered with template
'''    
def run_vulnerability_analysis(bioregion):
    #still need climate change data
    
    #get human consumption (HANPP - Human Appropriation of Net Primary Productivity)
    #represents regions in which human consumption is greatly in excess of local ecosystems
    human_consumption = get_human_consumption(bioregion)
    #get human presence (built up land - light signatures and landuse) (0-100, low to high)
    human_presence = get_human_presence(bioregion)
    #get human footprint 
    #(1 represents the 1% least influenced area in its biome, values could differ in representation for different areas/biomes)
    human_footprint = get_human_footprint(bioregion)
    #get human influence index (HII)  (0-64, low to high)
    human_influence = get_human_influence(bioregion)
    #get water stress (ration of human water use to renewable water resources)
    water_stress = get_water_stress(bioregion)
    #get infant deaths
    infant_deaths = get_infant_deaths(bioregion)
    #get underweight children (number of underweight children under the age of 5)
    underweight_children = get_underweight_children(bioregion)
    #compile context
    context = {'bioregion': bioregion, 'default_value': default_value, 'human_consumption': human_consumption, 'human_presence': human_presence, 'human_footprint': human_footprint, 'human_influence': human_influence, 'water_stress': water_stress, 'infant_deaths': infant_deaths, 'underweight_children': underweight_children}
    return context

def get_human_consumption(bioregion):
    hc_geom = RasterDataset.objects.get(name='human_consumption')
    hc_stats = zonal_stats(bioregion.output_geom, hc_geom)
    return int(hc_stats.avg)
   
def get_human_presence(bioregion):
    hp_geom = RasterDataset.objects.get(name='human_presence')
    hp_stats = zonal_stats(bioregion.output_geom, hp_geom)
    return int(hp_stats.avg)
   
def get_human_footprint(bioregion):
    hf_geom = RasterDataset.objects.get(name='human_footprint')
    hf_stats = zonal_stats(bioregion.output_geom, hf_geom)
    return int(hf_stats.avg)
   
def get_human_influence(bioregion):
    hii_geom = RasterDataset.objects.get(name='human_influence_index')
    hii_stats = zonal_stats(bioregion.output_geom, hii_geom)
    return int(hii_stats.avg)
   
def get_water_stress(bioregion):
    ws_geom = RasterDataset.objects.get(name='water_stress')
    ws_stats = zonal_stats(bioregion.output_geom, ws_geom)
    return int(ws_stats.avg)
   
def get_infant_deaths(bioregion):
    id_geom = RasterDataset.objects.get(name='infant_deaths')
    id_stats = zonal_stats(bioregion.output_geom, id_geom)
    return int(id_stats.avg)
   
def get_underweight_children(bioregion):
    uwc_geom = RasterDataset.objects.get(name='underweight_children')
    uwc_stats = zonal_stats(bioregion.output_geom, uwc_geom)
    return int(uwc_stats.avg)
   